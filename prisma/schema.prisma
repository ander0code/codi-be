// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/prisma/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
  1) CORE / USERS
========================= */
model User {
  id                   String   @id @default(cuid()) @db.Text
  name                 String
  email                String   @unique @db.Citext
  password_hash        String
  onboarding_completed Boolean  @default(false)
  created_at           DateTime @default(now()) @db.Timestamptz(6)
  updated_at           DateTime @default(now()) @db.Timestamptz(6)

  preferences UserPreferences?
  receipts    Receipt[]
  userPromos  UserPromo[]
}

/* Preferencias (JSONB arrays) */
model UserPreferences {
  id                     String   @id @default(cuid()) @db.Text
  user_id                String   @unique @db.Text
  goals                  Json     @default("[]")
  lifestyles             Json     @default("[]")
  ingredients_to_avoid   Json     @default("[]")
  updated_at             DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/* =========================
  2) STORES + ALIASES
========================= */
model Store {
  id         String   @id @default(cuid()) @db.Text
  name       String   @unique
  logo_path  String?
  category   String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  receipts Receipt[]
  promos   Promo[]
  aliases  StoreAlias[]
}

model StoreAlias {
  id       String @id @default(cuid()) @db.Text
  store_id String @db.Text
  alias    String @unique

  store Store @relation(fields: [store_id], references: [id], onDelete: Cascade)
}

/* =========================
  3) RECEIPTS + ITEMS
========================= */
model Receipt {
  id              String   @id @default(cuid()) @db.Text
  user_id         String   @db.Text
  store_id        String?  @db.Text
  store_name_raw  String?
  receipt_date    DateTime? @db.Date
  currency_code   String   @default("PEN") @db.Char(3)
  subtotal        Decimal? @db.Decimal(12, 2)
  tax             Decimal? @db.Decimal(12, 2)
  tax_rate        Decimal? @db.Decimal(5, 4)
  total           Decimal? @db.Decimal(12, 2)
  payment_method  String?
  payment_last4   String?
  scanned_text    String?
  image_uri       String?
  storage         String   @default("local")
  status          String   @default("procesando") // procesando|listo|error
  error_message   String?
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store  Store? @relation(fields: [store_id], references: [id])
  items  ReceiptItem[]

  @@index([user_id, receipt_date(sort: Desc)])
  @@index([store_id])
}

model ReceiptItem {
  id                String   @id @default(cuid()) @db.Text
  receipt_id        String   @db.Text
  line_number       Int?
  original_text     String?
  product_name      String?
  quantity          Decimal? @db.Decimal(12, 3)
  unit              String?  // 'un', 'kg', 'l', etc.
  unit_price        Decimal? @db.Decimal(12, 2)
  total_price       Decimal? @db.Decimal(12, 2)
  matched           Boolean  @default(false)
  match_score       Decimal? @db.Decimal(6, 4)
  qdrant_collection String?
  qdrant_point_id   String?
  brand             String?
  category          String?
  subcategory       String?
  // Snapshot del factor
  factor_co2_per_unit Decimal? @db.Decimal(12, 4)
  factor_unit         String?
  factor_source       String?
  factor_version      String?
  is_eco_flag         Boolean  @default(false)
  flags               Json     @default("{}")

  receipt Receipt @relation(fields: [receipt_id], references: [id], onDelete: Cascade)

  @@index([receipt_id])
  @@index([qdrant_collection, qdrant_point_id])
}

/* =========================
  4) PROMOS
========================= */
model Promo {
  id                 String   @id @default(cuid()) @db.Text
  title              String
  description        String?
  promo_type         String   // descuento|producto_gratis|2x1|vale|taller
  store_id           String?  @db.Text
  icon_name          String?
  receipts_required  Int      @default(0)
  validity_start     DateTime? @db.Date
  validity_end       DateTime? @db.Date
  is_active          Boolean  @default(true)
  created_at         DateTime @default(now()) @db.Timestamptz(6)

  store      Store?      @relation(fields: [store_id], references: [id])
  userPromos UserPromo[]
}

model UserPromo {
  id           String   @id @default(cuid()) @db.Text
  user_id      String   @db.Text
  promo_id     String   @db.Text
  is_available Boolean  @default(false)
  redeemed_at  DateTime?
  payload      Json     @default("{}")

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  promo Promo @relation(fields: [promo_id], references: [id], onDelete: Cascade)

  @@unique([user_id, promo_id])
}

/* =========================
  5) AUDIT
========================= */
model AuditEvent {
  id         String   @id @default(cuid()) @db.Text
  user_id    String?  @db.Text
  entity     String
  entity_id  String?  @db.Text
  action     String
  data       Json?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // (sin relaciones estrictas por ser log flexible)
}
