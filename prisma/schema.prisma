generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/prisma/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
  1) NÚCLEO / USUARIOS
========================= */
model Usuarios {
  Id                   String   @id @default(uuid()) @db.Uuid
  Nombre               String
  Apellido             String
  Correo               String   @unique @db.Citext
  contrasena           String
  CreadoEn             DateTime @default(now()) @db.Timestamptz(6)
  ActualizadoEn        DateTime @updatedAt

  Preferencias  PreferenciasUsuarios?
  Boletas       Boletas[]
  PromosUsuario PromocionesUsuarios[]
}

/* Preferencias (JSONB arrays) */
model PreferenciasUsuarios {
  Id                   String   @id @default(uuid()) @db.Uuid
  UsuarioId            String   @unique @db.Uuid
  Objetivos            Json     @default("[]")
  EstilosVida          Json     @default("[]")
  IngredientesEvitar   Json     @default("[]")
  ActualizadoEn        DateTime @updatedAt

  Usuario Usuarios @relation(fields: [UsuarioId], references: [Id], onDelete: Cascade)
}

/* =========================
  2) TIENDAS 
========================= */
model Tiendas {
  Id         String   @id @default(uuid()) @db.Uuid
  Nombre     String   @unique
  UrlLogo   String?
  Categoria  String?  //enum pendiente
  CreadoEn   DateTime @default(now()) @db.Timestamptz(6)

  Boletas Boletas[]
  Promos  Promociones[]
}

/* =========================
  3) BOLETAS + Productos 
========================= */
model Boletas {
  Id             String    @id @default(uuid()) @db.Uuid
  UsuarioId      String    @db.Uuid
  TiendaId       String?   @db.Uuid
  NombreTienda   String?
  FechaBoleta    DateTime? @db.Date
  CodigoMoneda   String    @default("PEN") @db.Char(3)
  Subtotal       Decimal?  @db.Decimal(12, 2)
  Impuesto       Decimal?  @db.Decimal(12, 2)
  TasaImpuesto   Decimal?  @db.Decimal(5, 4)
  Total          Decimal?  @db.Decimal(12, 2)
  MetodoPago     String? // enum pendiente
  TextoEscaneado String?
  UrlImagen      String?
  CreadoEn       DateTime  @default(now()) @db.Timestamptz(6)

  Usuario Usuarios @relation(fields: [UsuarioId], references: [Id], onDelete: Cascade)
  Tienda  Tiendas? @relation(fields: [TiendaId], references: [Id])
  Items   Productos[]

  @@index([UsuarioId, FechaBoleta(sort: Desc)])
  @@index([TiendaId])
}

model Productos {
  Id                  String   @id @default(uuid()) @db.Uuid
  BoletaId            String   @db.Uuid
  NumeroLinea         Int?
  TextoOriginal       String?
  NombreProducto      String?
  Cantidad            Decimal? @db.Decimal(12, 3)
  Unidad              String?  // enum pendiente (un, kg, l)
  PrecioUnitario      Decimal? @db.Decimal(12, 2)
  PrecioTotal         Decimal? @db.Decimal(12, 2)
  Coincidido          Boolean  @default(false)
  PuntajeCoincidencia Decimal? @db.Decimal(6, 4)
  ColeccionQdrant     String?
  PuntoQdrantId       String?

  // --- Catálogos normalizados ---
  MarcaId        String? @db.Uuid
  CategoriaId    String? @db.Uuid
  SubcategoriaId String? @db.Uuid
  
  // --- Huella de carbono ---
  FactorCo2PorUnidad Decimal? @db.Decimal(12, 4)
  FactorUnidad       String?
  FactorFuente       String?
  EsEco              Boolean  @default(false)

  Boleta       Boletas       @relation(fields: [BoletaId], references: [Id], onDelete: Cascade)
  Marca        Marcas?        @relation(fields: [MarcaId], references: [Id])
  Categoria    Categorias?    @relation(fields: [CategoriaId], references: [Id])
  Subcategoria Subcategorias? @relation(fields: [SubcategoriaId], references: [Id])

  @@index([BoletaId])
  @@index([ColeccionQdrant, PuntoQdrantId])
  @@index([MarcaId])
  @@index([CategoriaId])
  @@index([SubcategoriaId])
}

/* =========================
  CÁTALOGOS
========================= */
model Marcas {
  Id     String        @id @default(uuid()) @db.Uuid
  Nombre String        @unique
  Items  Productos[]
}

model Categorias {
  Id             String           @id @default(uuid()) @db.Uuid
  Nombre         String           @unique
  Subcategorias  Subcategorias[]
  Items          Productos[]
}

model Subcategorias {
  Id          String   @id @default(uuid()) @db.Uuid
  Nombre      String
  CategoriaId String?   @db.Uuid

  Categoria Categorias? @relation(fields: [CategoriaId], references: [Id], onDelete: Cascade)
  Items     Productos[]

  @@unique([Nombre, CategoriaId])
  @@index([CategoriaId])
}

/* =========================
  4) PROMOCIONES
========================= */
model Promociones {
  Id                  String    @id @default(uuid()) @db.Uuid
  Titulo              String
  Descripcion         String?
  TipoPromocion       String    // enum pendiente
  TiendaId            String?   @db.Uuid
  BoletasRequeridas   Int       @default(0)
  ValidezInicio       DateTime? @db.Date
  ValidezFin          DateTime? @db.Date
  Activa              Boolean   @default(true)
  CreadoEn            DateTime  @default(now()) @db.Timestamptz(6)

  Tienda        Tiendas? @relation(fields: [TiendaId], references: [Id])
  PromosUsuario PromocionesUsuarios[]
}

model PromocionesUsuarios {
  Id           String   @id @default(uuid()) @db.Uuid
  UsuarioId    String   @db.Text
  PromocionId  String   @db.Text
  Disponible   Boolean  @default(false)
  FechaUso     DateTime?
  Detalles     Json     @default("{}")

  Usuario   Usuarios     @relation(fields: [UsuarioId], references: [Id], onDelete: Cascade)
  Promocion Promociones  @relation(fields: [PromocionId], references: [Id], onDelete: Cascade)

  @@unique([UsuarioId, PromocionId])
}